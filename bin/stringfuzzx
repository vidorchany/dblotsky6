#!/usr/bin/env python3

'''
The fuzzer tool that transforms existing problems.
'''

import sys
import argparse
import random

from stringfuzz.constants import LANGUAGES, SMT_20_STRING, SMT_25_STRING
from stringfuzz.transformers import unprintable, nop, rotate, fuzz, graft
from stringfuzz.generator import generate
from stringfuzz.parser import parse, ParsingError

# constants
UNPRINTABLE = 'unprintable'
NOP         = 'nop'
ROTATE      = 'rotate'
FUZZ        = 'fuzz'
GRAFT       = 'graft'

TRANSFORMERS = {
    UNPRINTABLE: unprintable,
    NOP:         nop,
    ROTATE:      rotate,
    FUZZ:        fuzz,
    GRAFT:       graft
}

# defaults
DEFAULT_SEED   = 0
DEFAULT_RANDOM = False

def main():

    # create arg parser
    global_parser = argparse.ArgumentParser(description='SMTLIB 2.* problem transformer.')
    global_parser.add_argument(
        '--file',
        '-f',
        dest    = 'file',
        metavar = 'F',
        default = sys.stdin,
        type    = argparse.FileType('r'),
        help    = 'input file (default: stdin)'
    )
    global_parser.add_argument(
        '--in-lang',
        '-i',
        dest    = 'input_language',
        type    = str,
        choices = LANGUAGES,
        default = SMT_25_STRING,
        help    = 'input language (default: {})'.format(SMT_25_STRING)
    )
    global_parser.add_argument(
        '--out-lang',
        '-o',
        dest    = 'output_language',
        type    = str,
        choices = LANGUAGES,
        default = SMT_25_STRING,
        help    = 'output language (default: {})'.format(SMT_25_STRING)
    )
    global_parser.add_argument(
        'transformer',
        type    = str,
        choices = TRANSFORMERS.keys(),
        help    = 'transformations to perform'
    )

    seed_group = global_parser.add_mutually_exclusive_group()
    seed_group.add_argument(
        '--seed',
        '-s',
        dest    = 'seed',
        metavar = 'S',
        type    = int,
        default = DEFAULT_SEED,
        help    = 'seed for random number generator (default: {})'.format(DEFAULT_SEED)
    )
    seed_group.add_argument(
        '--random',
        '-r',
        dest    = 'random',
        action  = 'store_true',
        default = DEFAULT_RANDOM,
        help    = 'seed the random number generator with the current time (default: {})'.format(DEFAULT_RANDOM)
    )

    # parse args
    args = global_parser.parse_args()

    # seed the RNG
    if args.random is True:
        random.seed()
    else:
        random.seed(args.seed)

    # get transformer
    transformer = TRANSFORMERS[args.transformer]

    # read input
    raw_in = args.file.read()

    # run transformer
    try:
        transformed = transformer(raw_in, args.input_language)
    except ParsingError as e:
        print(e, file=sys.stderr)
        return 1

    # print putput
    raw_out = generate(transformed, args.output_language)
    print(raw_out)

if __name__ == '__main__':
    main()
